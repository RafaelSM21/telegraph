üì° Projeto Tel√©grafo com ESP32, Node.js e PostgreSQL
Badge Badge Badge Badge

üìå Vis√£o Geral
Prot√≥tipo funcional de um manipulador de c√≥digo Morse utilizando:

Hardware: ESP32 com 3 bot√µes f√≠sicos

Backend: Node.js com comunica√ß√£o serial

Banco de Dados: PostgreSQL para armazenamento

Interface Web: Visualiza√ß√£o das mensagens traduzidas

üõ†Ô∏è Componentes do Sistema
üîå Hardware (ESP32)
cpp
// Exemplo simplificado do c√≥digo do ESP32
void setup() {
  Serial.begin(9600);
  pinMode(BOTAO_PONTO, INPUT);
  pinMode(BOTAO_TRACO, INPUT);
  pinMode(BOTAO_ESPACO, INPUT);
}
üåê Backend (Node.js)
javascript
// Exemplo de trecho do servidor Node.js
const { SerialPort } = require('serialport');
const port = new SerialPort({ path: 'COM3', baudRate: 9600 });

port.on('data', (data) => {
  const morse = data.toString();
  const texto = traduzMorse(morse);
  salvarNoBanco(morse, texto);
});
üóÉÔ∏è Banco de Dados (PostgreSQL)
sql
-- Estrutura da tabela (j√° inclu√≠da no relat√≥rio)
CREATE TABLE mensagens (
  id SERIAL PRIMARY KEY,
  morse TEXT NOT NULL,
  texto TEXT NOT NULL,
  data TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
üìã Fluxo do Sistema
Entrada F√≠sica: Usu√°rio pressiona bot√µes no ESP32

Bot√£o 1: Ponto (.)

Bot√£o 2: Tra√ßo (-)

Bot√£o 3: Espa√ßo (entre letras) ou Envio (segurado)

Comunica√ß√£o Serial: ESP32 envia c√≥digo Morse via USB

Processamento: Node.js recebe e traduz para texto

Armazenamento: Dados salvos no PostgreSQL

Visualiza√ß√£o: Interface web mostra hist√≥rico de mensagens

üöÄ Como Executar o Projeto
Pr√©-requisitos
ESP32 com firmware instalado

Node.js v18+

PostgreSQL 14+

Python 3.8+ (para scripts auxiliares)

Instala√ß√£o
bash
# Clone o reposit√≥rio
git clone https://github.com/seu-usuario/telegrafo-morse.git
cd telegrafo-morse

# Instale as depend√™ncias do Node.js
npm install

# Configure o banco de dados (PostgreSQL)
createdb morse
psql morse < schema.sql
Configura√ß√£o
Edite config.json com suas portas e credenciais

Conecte o ESP32 via USB

Inicie o servidor:

bash
node server.js
üåê Interface Web
Acesse http://localhost:3000 para:

Visualizar mensagens recentes

Ver hist√≥rico completo

Exportar dados em CSV

Diagrama de Arquitetura

üìä Estrutura do Banco de Dados
Coluna	Tipo	Descri√ß√£o
id	SERIAL	Chave prim√°ria
morse	TEXT	C√≥digo Morse original
texto	TEXT	Texto traduzido
data	TIMESTAMP	Data/hora do registro
ü§ù Como Contribuir
Fa√ßa um fork do projeto

Crie uma branch para sua feature (git checkout -b feature/nova-feature)

Commit suas mudan√ßas (git commit -m 'Adiciona nova feature')

Push para a branch (git push origin feature/nova-feature)

Abra um Pull Request

üìÑ Licen√ßa
Distribu√≠do sob a licen√ßa MIT. Veja LICENSE para mais informa√ß√µes.

‚úâÔ∏è Contato
Guilherme Teixeira - guilherme@exemplo.com

Rafael Soares - rafael@exemplo.com
